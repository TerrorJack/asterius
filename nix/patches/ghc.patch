From b7f19d21f7946c936c238887d91ece17c95b097a Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 14:44:23 -0700
Subject: [PATCH 01/29] Use the same UnitId `integer` for `integer-gmp` and
 `integer-simple`

this makes more code in GHC independent of the choice of the integer
library, which is beneficial for API users, and is a first step towards
fixing #13477.
---
 compiler/basicTypes/Module.hs                 |  6 +-----
 compiler/prelude/PrelNames.hs                 | 18 +++++-------------
 libraries/integer-gmp/integer-gmp.cabal       |  2 +-
 libraries/integer-simple/integer-simple.cabal |  4 ++--
 4 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/basicTypes/Module.hs b/basicTypes/Module.hs
index 1851496af1a..9809bc6bd13 100644
--- a/basicTypes/Module.hs
+++ b/basicTypes/Module.hs
@@ -1067,11 +1067,7 @@ integerUnitId, primUnitId,
   baseUnitId, rtsUnitId,
   thUnitId, mainUnitId, thisGhcUnitId, interactiveUnitId  :: UnitId
 primUnitId        = fsToUnitId (fsLit "ghc-prim")
-integerUnitId     = fsToUnitId (fsLit n)
-  where
-    n = case cIntegerLibraryType of
-        IntegerGMP    -> "integer-gmp"
-        IntegerSimple -> "integer-simple"
+integerUnitId     = fsToUnitId (fsLit "integer")
 baseUnitId        = fsToUnitId (fsLit "base")
 rtsUnitId         = fsToUnitId (fsLit "rts")
 thUnitId          = fsToUnitId (fsLit "template-haskell")
diff --git a/prelude/PrelNames.hs b/prelude/PrelNames.hs
index 90f1f44713f..77afca1369e 100644
--- a/prelude/PrelNames.hs
+++ b/prelude/PrelNames.hs
@@ -136,7 +136,6 @@ import Unique
 import Name
 import SrcLoc
 import FastString
-import Config ( cIntegerLibraryType, IntegerLibrary(..) )
 import Panic ( panic )
 
 {-
@@ -355,6 +354,7 @@ basicKnownKeyNames
         gcdIntegerName, lcmIntegerName,
         andIntegerName, orIntegerName, xorIntegerName, complementIntegerName,
         shiftLIntegerName, shiftRIntegerName, bitIntegerName,
+        integerSDataConName,naturalSDataConName,
 
         -- Natural
         naturalTyConName,
@@ -433,9 +433,7 @@ basicKnownKeyNames
         , typeErrorVAppendDataConName
         , typeErrorShowTypeDataConName
 
-    ] ++ case cIntegerLibraryType of
-           IntegerGMP    -> [integerSDataConName,naturalSDataConName]
-           IntegerSimple -> []
+    ]
 
 genericTyConNames :: [Name]
 genericTyConNames = [
@@ -1117,11 +1115,8 @@ integerTyConName, mkIntegerName, integerSDataConName,
     gcdIntegerName, lcmIntegerName,
     andIntegerName, orIntegerName, xorIntegerName, complementIntegerName,
     shiftLIntegerName, shiftRIntegerName, bitIntegerName :: Name
-integerTyConName      = tcQual  gHC_INTEGER_TYPE (fsLit "Integer")           integerTyConKey
-integerSDataConName   = dcQual gHC_INTEGER_TYPE (fsLit n)                    integerSDataConKey
-  where n = case cIntegerLibraryType of
-            IntegerGMP    -> "S#"
-            IntegerSimple -> panic "integerSDataConName evaluated for integer-simple"
+integerTyConName      = tcQual gHC_INTEGER_TYPE (fsLit "Integer")           integerTyConKey
+integerSDataConName   = dcQual gHC_INTEGER_TYPE (fsLit "S#")                integerSDataConKey
 mkIntegerName         = varQual gHC_INTEGER_TYPE (fsLit "mkInteger")         mkIntegerIdKey
 integerToWord64Name   = varQual gHC_INTEGER_TYPE (fsLit "integerToWord64")   integerToWord64IdKey
 integerToInt64Name    = varQual gHC_INTEGER_TYPE (fsLit "integerToInt64")    integerToInt64IdKey
@@ -1168,10 +1163,7 @@ bitIntegerName        = varQual gHC_INTEGER_TYPE (fsLit "bitInteger")        bit
 -- GHC.Natural types
 naturalTyConName, naturalSDataConName :: Name
 naturalTyConName     = tcQual gHC_NATURAL (fsLit "Natural") naturalTyConKey
-naturalSDataConName  = dcQual gHC_NATURAL (fsLit n)         naturalSDataConKey
-  where n = case cIntegerLibraryType of
-            IntegerGMP    -> "NatS#"
-            IntegerSimple -> panic "naturalSDataConName evaluated for integer-simple"
+naturalSDataConName  = dcQual gHC_NATURAL (fsLit "NatS#")   naturalSDataConKey
 
 naturalFromIntegerName :: Name
 naturalFromIntegerName = varQual gHC_NATURAL (fsLit "naturalFromInteger") naturalFromIntegerIdKey

From db82a5dc9e33d3ed94d1328211b33bad65e19e5e Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 14:51:44 -0700
Subject: [PATCH 02/29] Introduce `integerLibrary :: DynFlags ->
 IntegerLibrary`

which is initialized via `cIntegerLibraryType`, but can be overriden by
an API user.

The only place where this is used is in `CorePrep`, to decide whether to
use the `S#` constructor.

Also removes the unused `cIntegerLibrary`.
---
 compiler/coreSyn/CorePrep.hs | 4 ++--
 compiler/ghc.mk              | 2 --
 compiler/main/DynFlags.hs    | 4 ++++
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/coreSyn/CorePrep.hs b/coreSyn/CorePrep.hs
index 9c2954d4efd..0349c8c552a 100644
--- a/coreSyn/CorePrep.hs
+++ b/coreSyn/CorePrep.hs
@@ -1538,13 +1538,13 @@ lookupMkNaturalName dflags hsc_env
       lookupGlobal hsc_env mkNaturalName
 
 lookupIntegerSDataConName :: DynFlags -> HscEnv -> IO (Maybe DataCon)
-lookupIntegerSDataConName dflags hsc_env = case cIntegerLibraryType of
+lookupIntegerSDataConName dflags hsc_env = case integerLibrary dflags of
     IntegerGMP -> guardIntegerUse dflags $ liftM (Just . tyThingDataCon) $
                   lookupGlobal hsc_env integerSDataConName
     IntegerSimple -> return Nothing
 
 lookupNaturalSDataConName :: DynFlags -> HscEnv -> IO (Maybe DataCon)
-lookupNaturalSDataConName dflags hsc_env = case cIntegerLibraryType of
+lookupNaturalSDataConName dflags hsc_env = case integerLibrary dflags of
     IntegerGMP -> guardNaturalUse dflags $ liftM (Just . tyThingDataCon) $
                   lookupGlobal hsc_env naturalSDataConName
     IntegerSimple -> return Nothing
#diff --git a/ghc.mk b/ghc.mk
#index 9bc6b3f278b..8a4cc4317d0 100644
#--- a/ghc.mk
#+++ b/ghc.mk
#@@ -84,8 +84,6 @@ compiler/stage%/build/Config.hs : mk/config.mk mk/project.mk | $$(dir $$@)/.
# 	@echo 'cBooterVersion        = "$(GhcVersion)"'                     >> $@
# 	@echo 'cStage                :: String'                             >> $@
# 	@echo 'cStage                = show (STAGE :: Int)'                 >> $@
#-	@echo 'cIntegerLibrary       :: String'                             >> $@
#-	@echo 'cIntegerLibrary       = "$(INTEGER_LIBRARY)"'                >> $@
# 	@echo 'cIntegerLibraryType   :: IntegerLibrary'                     >> $@
# ifeq "$(INTEGER_LIBRARY)" "integer-gmp"
# 	@echo 'cIntegerLibraryType   = IntegerGMP'                          >> $@
diff --git a/main/DynFlags.hs b/main/DynFlags.hs
index 66c67c352e9..61838a0b9ed 100644
--- a/main/DynFlags.hs
+++ b/main/DynFlags.hs
@@ -848,6 +848,9 @@ data DynFlags = DynFlags {
   ghcLink               :: GhcLink,
   hscTarget             :: HscTarget,
   settings              :: Settings,
+  integerLibrary        :: IntegerLibrary,
+    -- ^ IntegerGMP or IntegerSimple. Set at configure time, but may be overriden
+    --   by GHC-API users
   llvmTargets           :: LlvmTargets,
   llvmPasses            :: LlvmPasses,
   verbosity             :: Int,         -- ^ Verbosity level: see Note [Verbosity levels]
@@ -1753,6 +1756,7 @@ defaultDynFlags mySettings (myLlvmTargets, myLlvmPasses) =
         ghcMode                 = CompManager,
         ghcLink                 = LinkBinary,
         hscTarget               = defaultHscTarget (sTargetPlatform mySettings),
+        integerLibrary          = cIntegerLibraryType,
         verbosity               = 0,
         optLevel                = 0,
         debugLevel              = 0,

From 71cff209728c3808b754117963645805b75af5f4 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 16:00:15 -0700
Subject: [PATCH 03/29] Find the `integer` package (either `integer-gmp` or
 `integer-simple`)

---
 compiler/main/Packages.hs | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/main/Packages.hs b/main/Packages.hs
index 71354b1463c..9fa5a95e48a 100644
--- a/main/Packages.hs
+++ b/main/Packages.hs
@@ -975,6 +975,8 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
   --
   let
         matches :: PackageConfig -> String -> Bool
+        pc `matches` "integer"
+            = packageNameString pc `elem` ["integer-gmp", "integer-simple"]
         pc `matches` pid = packageNameString pc == pid
 
         -- find which package corresponds to each wired-in package

From 6c3076c5e53c2744af9592ca8734f3931c306105 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 16:33:34 -0700
Subject: [PATCH 04/29] Update findWiredInPackages to handle new integer unit
 name

The code is more robust now; previously it was assuming in multiple
spots that the wired-in unit name is always equal to the package name;
now this assumption only made in the `matches` function, with
special-case for `integer`.
---
 compiler/main/Packages.hs | 33 ++++++++++++++++-----------------
 1 file changed, 16 insertions(+), 17 deletions(-)

diff --git a/main/Packages.hs b/main/Packages.hs
index 9fa5a95e48a..20f37006fdb 100644
--- a/main/Packages.hs
+++ b/main/Packages.hs
@@ -954,11 +954,12 @@ pprTrustFlag flag = case flag of
 -- -----------------------------------------------------------------------------
 -- Wired-in packages
 
-wired_in_pkgids :: [String]
-wired_in_pkgids = map unitIdString wiredInUnitIds
-
+type WiredInUnitId = String
 type WiredPackagesMap = Map WiredUnitId WiredUnitId
 
+wired_in_pkgids :: [WiredInUnitId]
+wired_in_pkgids = map unitIdString wiredInUnitIds
+
 findWiredInPackages
    :: DynFlags
    -> PackagePrecedenceIndex
@@ -974,7 +975,7 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
   -- their canonical names (eg. base-1.0 ==> base).
   --
   let
-        matches :: PackageConfig -> String -> Bool
+        matches :: PackageConfig -> WiredInUnitId -> Bool
         pc `matches` "integer"
             = packageNameString pc `elem` ["integer-gmp", "integer-simple"]
         pc `matches` pid = packageNameString pc == pid
@@ -996,8 +997,8 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
         -- this works even when there is no exposed wired in package
         -- available.
         --
-        findWiredInPackage :: [PackageConfig] -> String
-                           -> IO (Maybe PackageConfig)
+        findWiredInPackage :: [PackageConfig] -> WiredInUnitId
+                           -> IO (Maybe (WiredInUnitId, PackageConfig))
         findWiredInPackage pkgs wired_pkg =
            let all_ps = [ p | p <- pkgs, p `matches` wired_pkg ]
                all_exposed_ps =
@@ -1016,20 +1017,19 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
                                  <> text " not found."
                           return Nothing
                 pick :: PackageConfig
-                     -> IO (Maybe PackageConfig)
+                     -> IO (Maybe (WiredInUnitId, PackageConfig))
                 pick pkg = do
                         debugTraceMsg dflags 2 $
                             text "wired-in package "
                                  <> text wired_pkg
                                  <> text " mapped to "
                                  <> ppr (unitId pkg)
-                        return (Just pkg)
+                        return (Just (wired_pkg, pkg))
 
 
   mb_wired_in_pkgs <- mapM (findWiredInPackage pkgs) wired_in_pkgids
   let
         wired_in_pkgs = catMaybes mb_wired_in_pkgs
-        wired_in_ids = mapMaybe definitePackageConfigId wired_in_pkgs
 
         -- this is old: we used to assume that if there were
         -- multiple versions of wired-in packages installed that
@@ -1045,18 +1045,17 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
         -}
 
         wiredInMap :: Map WiredUnitId WiredUnitId
-        wiredInMap = foldl' add_mapping Map.empty pkgs
-          where add_mapping m pkg
-                  | Just key <- definitePackageConfigId pkg
-                  , key `elem` wired_in_ids
-                  = Map.insert key (DefUnitId (stringToInstalledUnitId (packageNameString pkg))) m
-                  | otherwise = m
+        wiredInMap = Map.fromList
+          [ (key, DefUnitId (stringToInstalledUnitId wiredInUnitId))
+          | (wiredInUnitId, pkg) <- wired_in_pkgs
+          , Just key <- pure $ definitePackageConfigId pkg
+          ]
 
         updateWiredInDependencies pkgs = map (upd_deps . upd_pkg) pkgs
           where upd_pkg pkg
                   | Just def_uid <- definitePackageConfigId pkg
-                  , def_uid `elem` wired_in_ids
-                  = let PackageName fs = packageName pkg
+                  , Just wiredInUnitId <- Map.lookup def_uid wiredInMap
+                  = let fs = installedUnitIdFS (unDefUnitId wiredInUnitId)
                     in pkg {
                       unitId = fsToInstalledUnitId fs,
                       componentId = ComponentId fs

From 2eca3a40d0a72cace6fdbba2fa59c83f1591d917 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 17:28:49 -0700
Subject: [PATCH 05/29] Unused import

---
 compiler/basicTypes/Module.hs | 1 -
 compiler/prelude/PrelNames.hs | 1 -
 2 files changed, 2 deletions(-)

diff --git a/basicTypes/Module.hs b/basicTypes/Module.hs
index 9809bc6bd13..44f841dcc5b 100644
--- a/basicTypes/Module.hs
+++ b/basicTypes/Module.hs
@@ -137,7 +137,6 @@ module Module
 
 import GhcPrelude
 
-import Config
 import Outputable
 import Unique
 import UniqFM
diff --git a/prelude/PrelNames.hs b/prelude/PrelNames.hs
index 77afca1369e..be468c019bd 100644
--- a/prelude/PrelNames.hs
+++ b/prelude/PrelNames.hs
@@ -136,7 +136,6 @@ import Unique
 import Name
 import SrcLoc
 import FastString
-import Panic ( panic )
 
 {-
 ************************************************************************

From 2046835af7d49d4331424a9af1388d212c4d887c Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Tue, 21 Aug 2018 09:36:18 -0700
Subject: [PATCH 06/29] Add a Note and and use integer-wired-in for the unit
 name

to signpost more clearly that there is something weird going on, and
that people should not look for a package `integer` somewhere. Also,
make sure the name is set only once.
---
 compiler/basicTypes/Module.hs                 |  3 +-
 compiler/coreSyn/CorePrep.hs                  |  1 +
 compiler/main/Packages.hs                     |  4 ++-
 compiler/prelude/PrelNames.hs                 | 30 +++++++++++++++++++
 libraries/integer-gmp/integer-gmp.cabal       |  5 +++-
 libraries/integer-simple/integer-simple.cabal |  5 ++--
 6 files changed, 43 insertions(+), 5 deletions(-)

diff --git a/basicTypes/Module.hs b/basicTypes/Module.hs
index 44f841dcc5b..7307a83525e 100644
--- a/basicTypes/Module.hs
+++ b/basicTypes/Module.hs
@@ -1066,7 +1066,8 @@ integerUnitId, primUnitId,
   baseUnitId, rtsUnitId,
   thUnitId, mainUnitId, thisGhcUnitId, interactiveUnitId  :: UnitId
 primUnitId        = fsToUnitId (fsLit "ghc-prim")
-integerUnitId     = fsToUnitId (fsLit "integer")
+integerUnitId     = fsToUnitId (fsLit "integer-wired-in")
+   -- See Note [The integer library] in PrelNames
 baseUnitId        = fsToUnitId (fsLit "base")
 rtsUnitId         = fsToUnitId (fsLit "rts")
 thUnitId          = fsToUnitId (fsLit "template-haskell")
diff --git a/coreSyn/CorePrep.hs b/coreSyn/CorePrep.hs
index 0349c8c552a..26706b1cdd8 100644
--- a/coreSyn/CorePrep.hs
+++ b/coreSyn/CorePrep.hs
@@ -1537,6 +1537,7 @@ lookupMkNaturalName dflags hsc_env
     = guardNaturalUse dflags $ liftM tyThingId $
       lookupGlobal hsc_env mkNaturalName
 
+-- See Note [The integer library] in PrelNames
 lookupIntegerSDataConName :: DynFlags -> HscEnv -> IO (Maybe DataCon)
 lookupIntegerSDataConName dflags hsc_env = case integerLibrary dflags of
     IntegerGMP -> guardIntegerUse dflags $ liftM (Just . tyThingDataCon) $
diff --git a/main/Packages.hs b/main/Packages.hs
index 20f37006fdb..13bac88cb16 100644
--- a/main/Packages.hs
+++ b/main/Packages.hs
@@ -976,7 +976,9 @@ findWiredInPackages dflags prec_map pkgs vis_map = do
   --
   let
         matches :: PackageConfig -> WiredInUnitId -> Bool
-        pc `matches` "integer"
+        pc `matches` pid
+            -- See Note [The integer library] in PrelNames
+            | pid == unitIdString integerUnitId
             = packageNameString pc `elem` ["integer-gmp", "integer-simple"]
         pc `matches` pid = packageNameString pc == pid
 
diff --git a/prelude/PrelNames.hs b/prelude/PrelNames.hs
index be468c019bd..3a5bb004bc8 100644
--- a/prelude/PrelNames.hs
+++ b/prelude/PrelNames.hs
@@ -110,6 +110,36 @@ by the user. For those things that *can* appear in source programs,
      original-name cache.
 
      See also Note [Built-in syntax and the OrigNameCache]
+
+
+Note [The integer library]
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Clearly, we need to know the names of various definitions of the integer
+library, e.g. the type itself, `mkInteger` etc. But there are two possible
+implementations of the integer library:
+
+ * integer-gmp (fast, but uses libgmp, which may not be available on all
+   targets and is GPL licensed)
+ * integer-simple (slow, but pure Haskell and BSD-licensed)
+
+We want the compiler to work with eitherone. The way we achieve this is:
+
+ * When compiling the integer-{gmp,simple} library, we pass
+     -this-unit-id  integer-wired-in
+   to GHC (see the cabal file libraries/integer-{gmp,simple}.
+ * This way, GHC can use just his UnitID (see Module.integerUnitId) when
+   generating code, and the linker will succeed.
+
+Unfortuately, the abstraction is not complete: When using integer-gmp, we
+really want to use the S# constructor directly. This is controlled by
+the `integerLibrary` field of `DynFlags`: If it is IntegerGMP, we use
+this constructor directly (see  CorePrep.lookupIntegerSDataConName)
+
+When we read the package data base, we have to rewrite it to use
+`integer-wired-in` instead of the actual UnitId (which includes the version
+number); just like for `base` and other packages. This is done in
+Packages.findWiredInPackages.
 -}
 
 {-# LANGUAGE CPP #-}

From 1658bea60d528c270047441b3087b9025517a38c Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Tue, 21 Aug 2018 09:48:33 -0700
Subject: [PATCH 07/29] More note references

---
 compiler/main/DynFlags.hs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/main/DynFlags.hs b/main/DynFlags.hs
index 61838a0b9ed..400f8d973fc 100644
--- a/main/DynFlags.hs
+++ b/main/DynFlags.hs
@@ -850,7 +850,7 @@ data DynFlags = DynFlags {
   settings              :: Settings,
   integerLibrary        :: IntegerLibrary,
     -- ^ IntegerGMP or IntegerSimple. Set at configure time, but may be overriden
-    --   by GHC-API users
+    --   by GHC-API users. See Note [The integer library] in PrelNames
   llvmTargets           :: LlvmTargets,
   llvmPasses            :: LlvmPasses,
   verbosity             :: Int,         -- ^ Verbosity level: see Note [Verbosity levels]

From 0993a26241e079e6d8333ef81c206e87f1f6f2c3 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 20 Aug 2018 21:29:42 -0700
Subject: [PATCH 08/29] Make tablesNextToCode a proper dynamic flag (#15548)

There is no more use of the TABLES_NEXT_TO_CODE CPP macro in
`compiler/`. The default value of `tablesNextToCode` is calculated as
before, but now users of the GHCI API can modify this flag.
---
 compiler/ghc.mk                   |  8 --------
 compiler/ghci/ByteCodeItbls.hs    |  4 +++-
 compiler/main/DynFlags.hs         |  8 +++-----
 compiler/utils/Util.hs            |  8 --------
 libraries/ghci/GHCi/InfoTable.hsc | 30 ++++++++++++------------------
 libraries/ghci/GHCi/Message.hs    |  7 ++++---
 libraries/ghci/GHCi/Run.hs        |  4 ++--
 7 files changed, 24 insertions(+), 45 deletions(-)

#diff --git a/ghc.mk b/ghc.mk
#index 8a4cc4317d0..f846f76b223 100644
#--- a/ghc.mk
#+++ b/ghc.mk
#@@ -334,14 +334,6 @@ endif
# ifeq "$(GhcWithInterpreter)" "YES"
# compiler_stage2_CONFIGURE_OPTS += --flags=ghci
# 
#-ifeq "$(GhcEnableTablesNextToCode) $(GhcUnregisterised)" "YES NO"
#-# Should GHCI be building info tables in the TABLES_NEXT_TO_CODE style
#-# or not?
#-# XXX This should logically be a CPP option, but there doesn't seem to
#-# be a flag for that
#-compiler_stage2_CONFIGURE_OPTS += --ghc-option=-DGHCI_TABLES_NEXT_TO_CODE
#-endif
#-
# # Should the debugger commands be enabled?
# ifeq "$(GhciWithDebugger)" "YES"
# compiler_stage2_CONFIGURE_OPTS += --ghc-option=-DDEBUGGER
diff --git a/ghci/ByteCodeItbls.hs b/ghci/ByteCodeItbls.hs
index 7381c8f9263..c17f2133652 100644
--- a/ghci/ByteCodeItbls.hs
+++ b/ghci/ByteCodeItbls.hs
@@ -71,6 +71,8 @@ make_constr_itbls hsc_env cons =
 
          descr = dataConIdentity dcon
 
-     r <- iservCmd hsc_env (MkConInfoTable ptrs' nptrs_really
+         tables_next_to_code = tablesNextToCode dflags
+
+     r <- iservCmd hsc_env (MkConInfoTable tables_next_to_code ptrs' nptrs_really
                               conNo (tagForCon dflags dcon) descr)
      return (getName dcon, ItblPtr r)
diff --git a/main/DynFlags.hs b/main/DynFlags.hs
index 400f8d973fc..28b302288dd 100644
--- a/main/DynFlags.hs
+++ b/main/DynFlags.hs
@@ -57,7 +57,7 @@ module DynFlags (
         fFlags, fLangFlags, xFlags,
         wWarningFlags,
         dynFlagDependencies,
-        tablesNextToCode, mkTablesNextToCode,
+        mkTablesNextToCode,
         makeDynFlagsConsistent,
         shouldUseColor,
         shouldUseHexWordLiterals,
@@ -851,6 +851,7 @@ data DynFlags = DynFlags {
   integerLibrary        :: IntegerLibrary,
     -- ^ IntegerGMP or IntegerSimple. Set at configure time, but may be overriden
     --   by GHC-API users. See Note [The integer library] in PrelNames
+  tablesNextToCode      :: Bool,
   llvmTargets           :: LlvmTargets,
   llvmPasses            :: LlvmPasses,
   verbosity             :: Int,         -- ^ Verbosity level: see Note [Verbosity levels]
@@ -1494,10 +1495,6 @@ defaultObjectTarget platform
   | cGhcWithNativeCodeGen == "YES"      =  HscAsm
   | otherwise                           =  HscLlvm
 
-tablesNextToCode :: DynFlags -> Bool
-tablesNextToCode dflags
-    = mkTablesNextToCode (platformUnregisterised (targetPlatform dflags))
-
 -- Determines whether we will be compiling
 -- info tables that reside just before the entry code, or with an
 -- indirection to the entry code.  See TABLES_NEXT_TO_CODE in
@@ -1757,6 +1754,7 @@ defaultDynFlags mySettings (myLlvmTargets, myLlvmPasses) =
         ghcLink                 = LinkBinary,
         hscTarget               = defaultHscTarget (sTargetPlatform mySettings),
         integerLibrary          = cIntegerLibraryType,
+        tablesNextToCode        = mkTablesNextToCode (platformUnregisterised (sTargetPlatform mySettings)),
         verbosity               = 0,
         optLevel                = 0,
         debugLevel              = 0,
diff --git a/utils/Util.hs b/utils/Util.hs
index 9523c08ff22..07ac253b615 100644
--- a/utils/Util.hs
+++ b/utils/Util.hs
@@ -10,7 +10,6 @@
 module Util (
         -- * Flags dependent on the compiler build
         ghciSupported, debugIsOn, ncgDebugIsOn,
-        ghciTablesNextToCode,
         isWindowsHost, isDarwinHost,
 
         -- * General list processing
@@ -205,13 +204,6 @@ ncgDebugIsOn = True
 ncgDebugIsOn = False
 #endif
 
-ghciTablesNextToCode :: Bool
-#if defined(GHCI_TABLES_NEXT_TO_CODE)
-ghciTablesNextToCode = True
-#else
-ghciTablesNextToCode = False
-#endif
-
 isWindowsHost :: Bool
 #if defined(mingw32_HOST_OS)
 isWindowsHost = True

From 93843a6b95a5a3d1e750bc4618f542a9b37b9141 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Wed, 22 Aug 2018 12:58:18 -0700
Subject: [PATCH 10/29] Do not pass -DTABLES_NEXT_TO_CODE to gcc (untested)

The goal of #15548 is to make GHC itself flexible in whether it should
produce TABLES_NEXT_TO_CODE code or not. Before this patch, it would
statically set the default set of gcc arguments to include
`-DTABLES_NEXT_TO_CODE`. But already the header files set
`-DTABLES_NEXT_TO_CODE`, so maybe this is not needed at all, and can
simply be removed?
---
 compiler/main/SysTools.hs | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/main/SysTools.hs b/main/SysTools.hs
index ff36c04ecff..48f8de83ed5 100644
--- a/main/SysTools.hs
+++ b/main/SysTools.hs
@@ -199,15 +199,9 @@ initSysTools top_dir
        let unreg_gcc_args = if targetUnregisterised
                             then ["-DNO_REGS", "-DUSE_MINIINTERPRETER"]
                             else []
-           -- TABLES_NEXT_TO_CODE affects the info table layout.
-           tntc_gcc_args
-            | mkTablesNextToCode targetUnregisterised
-               = ["-DTABLES_NEXT_TO_CODE"]
-            | otherwise = []
            cpp_args= map Option (words cpp_args_str)
            gcc_args = map Option (words gcc_args_str
-                               ++ unreg_gcc_args
-                               ++ tntc_gcc_args)
+                               ++ unreg_gcc_args)
        ldSupportsCompactUnwind <- getBooleanSetting "ld supports compact unwind"
        ldSupportsBuildId       <- getBooleanSetting "ld supports build-id"
        ldSupportsFilelist      <- getBooleanSetting "ld supports filelist"

From 997d30b8479adf1f330331c1bab942dfaa475680 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Sun, 23 Sep 2018 14:03:17 -0500
Subject: [PATCH 11/29] Fix asterius hooks

---
 compiler/cmm/CmmInfo.hs  |  5 +++--
 compiler/main/Hooks.hs   | 17 +++++++++++++++++
 compiler/main/HscMain.hs |  8 ++++----
 3 files changed, 24 insertions(+), 6 deletions(-)

diff --git a/cmm/CmmInfo.hs b/cmm/CmmInfo.hs
index 43cba2526de..07798d34c77 100644
--- a/cmm/CmmInfo.hs
+++ b/cmm/CmmInfo.hs
@@ -53,6 +53,7 @@ import UniqSupply
 import MonadUtils
 import Util
 import Outputable
+import Module
 
 import Data.Bits
 import Data.Word
@@ -66,9 +67,9 @@ mkEmptyContInfoTable info_lbl
                  , cit_srt  = Nothing
                  , cit_clo  = Nothing }
 
-cmmToRawCmm :: DynFlags -> Stream IO CmmGroup ()
+cmmToRawCmm :: DynFlags -> Maybe Module -> Stream IO CmmGroup ()
             -> IO (Stream IO RawCmmGroup ())
-cmmToRawCmm dflags cmms
+cmmToRawCmm dflags _ cmms
   = do { uniqs <- mkSplitUniqSupply 'i'
        ; let do_one uniqs cmm = do
                 case initUs uniqs $ concatMapM (mkInfoTable dflags) cmm of
diff --git a/main/Hooks.hs b/main/Hooks.hs
index f9d420ab619..d3e7bd3abcf 100644
--- a/main/Hooks.hs
+++ b/main/Hooks.hs
@@ -21,6 +21,9 @@ module Hooks ( Hooks
              , runRnSpliceHook
              , getValueSafelyHook
              , createIservProcessHook
+             , tcRnModuleHook
+             , stgCmmHook
+             , cmmToRawCmmHook
              ) where
 
 import GhcPrelude
@@ -44,6 +47,12 @@ import Type
 import System.Process
 import BasicTypes
 import HsExtension
+import Module
+import TyCon
+import CostCentre
+import StgSyn
+import Stream
+import Cmm
 
 import Data.Maybe
 
@@ -73,6 +82,9 @@ emptyHooks = Hooks
   , runRnSpliceHook        = Nothing
   , getValueSafelyHook     = Nothing
   , createIservProcessHook = Nothing
+  , tcRnModuleHook         = Nothing
+  , stgCmmHook             = Nothing
+  , cmmToRawCmmHook        = Nothing
   }
 
 data Hooks = Hooks
@@ -95,6 +107,11 @@ data Hooks = Hooks
   , getValueSafelyHook     :: Maybe (HscEnv -> Name -> Type
                                                           -> IO (Maybe HValue))
   , createIservProcessHook :: Maybe (CreateProcess -> IO ProcessHandle)
+  , tcRnModuleHook         :: Maybe (ModSummary -> Bool -> HsParsedModule -> Hsc TcGblEnv)
+  , stgCmmHook             :: Maybe (DynFlags -> Module -> [TyCon] -> CollectedCCs
+            -> [StgTopBinding] -> HpcInfo -> Stream IO CmmGroup ())
+  , cmmToRawCmmHook        :: Maybe (DynFlags -> Maybe Module -> Stream IO CmmGroup ()
+            -> IO (Stream IO RawCmmGroup ()))
   }
 
 getHooked :: (Functor f, HasDynFlags f) => (Hooks -> Maybe a) -> a -> f a
diff --git a/main/HscMain.hs b/main/HscMain.hs
index a8a33bfaad8..3f048ec9d77 100644
--- a/main/HscMain.hs
+++ b/main/HscMain.hs
@@ -440,7 +440,7 @@ hscTypecheck' keep_rn mod_summary mb_rdr_module = do
          do hpm <- case mb_rdr_module of
                     Just hpm -> return hpm
                     Nothing -> hscParse' mod_summary
-            tc_result0 <- tcRnModule' mod_summary keep_rn hpm
+            tc_result0 <- lookupHook tcRnModuleHook tcRnModule' dflags mod_summary keep_rn hpm
             if hsc_src == HsigFile
                 then do (iface, _, _) <- liftIO $ hscSimpleIface hsc_env tc_result0 Nothing
                         ioMsgMaybe $
@@ -1344,7 +1344,7 @@ hscGenHardCode hsc_env cgguts mod_summary output_filename = do
 
             ------------------  Code output -----------------------
             rawcmms0 <- {-# SCC "cmmToRawCmm" #-}
-                      cmmToRawCmm dflags cmms
+                      lookupHook cmmToRawCmmHook cmmToRawCmm dflags dflags (Just this_mod) cmms
 
             let dump a = do dumpIfSet_dyn dflags Opt_D_dump_cmm_raw "Raw Cmm"
                               (ppr a)
@@ -1403,7 +1403,7 @@ hscCompileCmmFile hsc_env filename output_filename = runHsc hsc_env $ do
             mod_name = mkModuleName $ "Cmm$" ++ FilePath.takeFileName filename
             cmm_mod = mkModule (thisPackage dflags) mod_name
         (_, cmmgroup) <- cmmPipeline hsc_env (emptySRT cmm_mod) cmm
-        rawCmms <- cmmToRawCmm dflags (Stream.yield cmmgroup)
+        rawCmms <- lookupHook cmmToRawCmmHook cmmToRawCmm dflags dflags Nothing (Stream.yield cmmgroup)
         _ <- codeOutput dflags cmm_mod output_filename no_loc NoStubs [] []
              rawCmms
         return ()
@@ -1428,7 +1428,7 @@ doCodeGen hsc_env this_mod data_tycons
 
     let cmm_stream :: Stream IO CmmGroup ()
         cmm_stream = {-# SCC "StgCmm" #-}
-            StgCmm.codeGen dflags this_mod data_tycons
+            lookupHook stgCmmHook StgCmm.codeGen dflags dflags this_mod data_tycons
                            cost_centre_info stg_binds hpc_info
 
         -- codegen consumes a stream of CmmGroup, and produces a new

From a7eb2fea4a181abd11e66c5d3ed338f6d08738c1 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Sun, 17 Feb 2019 19:44:17 +0800
Subject: [PATCH 24/29] Fix compiler/ghci

---
 compiler/ghci/ByteCodeItbls.hs | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/ghci/ByteCodeItbls.hs b/ghci/ByteCodeItbls.hs
index c17f2133652..7381c8f9263 100644
--- a/ghci/ByteCodeItbls.hs
+++ b/ghci/ByteCodeItbls.hs
@@ -71,8 +71,6 @@ make_constr_itbls hsc_env cons =
 
          descr = dataConIdentity dcon
 
-         tables_next_to_code = tablesNextToCode dflags
-
-     r <- iservCmd hsc_env (MkConInfoTable tables_next_to_code ptrs' nptrs_really
+     r <- iservCmd hsc_env (MkConInfoTable ptrs' nptrs_really
                               conNo (tagForCon dflags dcon) descr)
      return (getName dcon, ItblPtr r)

From 321634fcd428aa2da90c50286c7345f8d9c3be82 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Sun, 17 Feb 2019 19:57:45 +0800
Subject: [PATCH 25/29] Misc other fixes

---
 compiler/ghc.mk        | 8 ++++++++
 compiler/utils/Util.hs | 8 ++++++++
 2 files changed, 16 insertions(+)

#diff --git a/ghc.mk b/ghc.mk
#index 5e20648dc1d..6cfa43ac5c9 100644
#--- a/ghc.mk
#+++ b/ghc.mk
#@@ -334,6 +334,14 @@ endif
# ifeq "$(GhcWithInterpreter)" "YES"
# compiler_stage2_CONFIGURE_OPTS += --flags=ghci
# 
#+ifeq "$(GhcEnableTablesNextToCode) $(GhcUnregisterised)" "YES NO"
#+# Should GHCI be building info tables in the TABLES_NEXT_TO_CODE style
#+# or not?
#+# XXX This should logically be a CPP option, but there doesn't seem to
#+# be a flag for that
#+compiler_stage2_CONFIGURE_OPTS += --ghc-option=-DGHCI_TABLES_NEXT_TO_CODE
#+endif
#+
# # Should the debugger commands be enabled?
# ifeq "$(GhciWithDebugger)" "YES"
# compiler_stage2_CONFIGURE_OPTS += --ghc-option=-DDEBUGGER
diff --git a/utils/Util.hs b/utils/Util.hs
index 3e9af16251c..16864fe0171 100644
--- a/utils/Util.hs
+++ b/utils/Util.hs
@@ -11,6 +11,7 @@
 module Util (
         -- * Flags dependent on the compiler build
         ghciSupported, debugIsOn, ncgDebugIsOn,
+        ghciTablesNextToCode,
         isWindowsHost, isDarwinHost,
 
         -- * General list processing
@@ -205,6 +206,13 @@ ncgDebugIsOn = True
 ncgDebugIsOn = False
 #endif
 
+ghciTablesNextToCode :: Bool
+#if defined(GHCI_TABLES_NEXT_TO_CODE)
+ghciTablesNextToCode = True
+#else
+ghciTablesNextToCode = False
+#endif
+
 isWindowsHost :: Bool
 #if defined(mingw32_HOST_OS)
 isWindowsHost = True

From 40f96bfca3f776347d89617c0d7575a4da877933 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Wed, 6 Mar 2019 12:17:38 +0800
Subject: [PATCH 26/29] Expose HscMain.doCodeGen

---
 compiler/main/HscMain.hs | 1 +
 1 file changed, 1 insertion(+)

diff --git a/main/HscMain.hs b/main/HscMain.hs
index 8b608ad7ac5..fdc2db92078 100644
--- a/main/HscMain.hs
+++ b/main/HscMain.hs
@@ -80,6 +80,7 @@ module HscMain
     , ioMsgMaybe
     , showModuleIndex
     , hscAddSptEntries
+    , doCodeGen
     ) where
 
 import GhcPrelude

From 0e056b60b66380ca2b259447c25af00614945fb1 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Mon, 11 Mar 2019 14:56:50 +0800
Subject: [PATCH 27/29] Expose Linker.getLinkDeps for use of asterius

---
 compiler/ghci/Linker.hs | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/ghci/Linker.hs b/ghci/Linker.hs
index dad13b7bbb0..c44e7e05c86 100644
--- a/ghci/Linker.hs
+++ b/ghci/Linker.hs
@@ -17,6 +17,8 @@ module Linker ( getHValue, showLinkerState,
                 extendLoadedPkgs,
                 linkPackages,initDynLinker,linkModule,
                 linkCmdLineLibs
+                ,readPLS
+                ,getLinkDeps
         ) where
 
 #include "HsVersions.h"

From 48c64a45cef4ee8a85d542508b037550f3990dec Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Tue, 12 Mar 2019 10:22:29 +0800
Subject: [PATCH 28/29] Revert "Expose Linker.getLinkDeps for use of asterius"

This reverts commit 0e056b60b66380ca2b259447c25af00614945fb1.
---
 compiler/ghci/Linker.hs | 2 --
 1 file changed, 2 deletions(-)

diff --git a/ghci/Linker.hs b/ghci/Linker.hs
index c44e7e05c86..dad13b7bbb0 100644
--- a/ghci/Linker.hs
+++ b/ghci/Linker.hs
@@ -17,8 +17,6 @@ module Linker ( getHValue, showLinkerState,
                 extendLoadedPkgs,
                 linkPackages,initDynLinker,linkModule,
                 linkCmdLineLibs
-                ,readPLS
-                ,getLinkDeps
         ) where
 
 #include "HsVersions.h"

From 7b44c90fbfd9e05d3c950a667697160415d8d929 Mon Sep 17 00:00:00 2001
From: Shao Cheng <cheng.shao@tweag.io>
Date: Tue, 12 Mar 2019 10:33:51 +0800
Subject: [PATCH 29/29] Expose Linker.linkDependencies

---
 compiler/ghci/Linker.hs | 1 +
 1 file changed, 1 insertion(+)

diff --git a/ghci/Linker.hs b/ghci/Linker.hs
index dad13b7bbb0..17d9ff08329 100644
--- a/ghci/Linker.hs
+++ b/ghci/Linker.hs
@@ -17,6 +17,7 @@ module Linker ( getHValue, showLinkerState,
                 extendLoadedPkgs,
                 linkPackages,initDynLinker,linkModule,
                 linkCmdLineLibs
+                ,modifyPLS,linkDependencies
         ) where
 
 #include "HsVersions.h"
